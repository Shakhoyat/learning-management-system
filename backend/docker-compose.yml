version: '3.8'

services:
  # API Gateway
  gateway:
    build:
      context: ./gateway
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - PORT=3000
    depends_on:
      - auth-service
      - user-service
      - skill-service
      - matching-service
      - session-service
      - payment-service
      - notification-service

  # Auth Service
  auth-service:
    build:
      context: ./services/auth-service
      dockerfile: Dockerfile
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=development
      - PORT=3001
      - MONGODB_URI=mongodb://mongo:27017/lms_auth
      - JWT_SECRET=your_jwt_secret
      - REDIS_URL=redis://redis:6379
    depends_on:
      - mongo
      - redis

  # User Service
  user-service:
    build:
      context: ./services/user-service
      dockerfile: Dockerfile
    ports:
      - "3002:3002"
    environment:
      - NODE_ENV=development
      - PORT=3002
      - MONGODB_URI=mongodb://mongo:27017/lms_users
      - REDIS_URL=redis://redis:6379
    depends_on:
      - mongo
      - redis

  # Skill Service
  skill-service:
    build:
      context: ./services/skill-service
      dockerfile: Dockerfile
    ports:
      - "3003:3003"
    environment:
      - NODE_ENV=development
      - PORT=3003
      - MONGODB_URI=mongodb://mongo:27017/lms_skills
      - REDIS_URL=redis://redis:6379
    depends_on:
      - mongo
      - redis

  # Matching Service
  matching-service:
    build:
      context: ./services/matching-service
      dockerfile: Dockerfile
    ports:
      - "3004:3004"
    environment:
      - NODE_ENV=development
      - PORT=3004
      - MONGODB_URI=mongodb://mongo:27017/lms_matching
      - REDIS_URL=redis://redis:6379
    depends_on:
      - mongo
      - redis

  # Session Service
  session-service:
    build:
      context: ./services/session-service
      dockerfile: Dockerfile
    ports:
      - "3005:3005"
    environment:
      - NODE_ENV=development
      - PORT=3005
      - MONGODB_URI=mongodb://mongo:27017/lms_sessions
      - REDIS_URL=redis://redis:6379
    depends_on:
      - mongo
      - redis

  # Payment Service
  payment-service:
    build:
      context: ./services/payment-service
      dockerfile: Dockerfile
    ports:
      - "3006:3006"
    environment:
      - NODE_ENV=development
      - PORT=3006
      - MONGODB_URI=mongodb://mongo:27017/lms_payments
      - REDIS_URL=redis://redis:6379
      - STRIPE_SECRET_KEY=your_stripe_secret_key
    depends_on:
      - mongo
      - redis

  # Notification Service
  notification-service:
    build:
      context: ./services/notification-service
      dockerfile: Dockerfile
    ports:
      - "3007:3007"
    environment:
      - NODE_ENV=development
      - PORT=3007
      - MONGODB_URI=mongodb://mongo:27017/lms_notifications
      - REDIS_URL=redis://redis:6379
      - SMTP_HOST=smtp.gmail.com
      - SMTP_PORT=587
      - SMTP_USER=your_email@gmail.com
      - SMTP_PASS=your_email_password
    depends_on:
      - mongo
      - redis

  # Workers
  email-worker:
    build:
      context: ./workers
      dockerfile: Dockerfile.email
    environment:
      - NODE_ENV=development
      - REDIS_URL=redis://redis:6379
      - SMTP_HOST=smtp.gmail.com
      - SMTP_PORT=587
      - SMTP_USER=your_email@gmail.com
      - SMTP_PASS=your_email_password
    depends_on:
      - redis

  payment-processor:
    build:
      context: ./workers
      dockerfile: Dockerfile.payment
    environment:
      - NODE_ENV=development
      - REDIS_URL=redis://redis:6379
      - STRIPE_SECRET_KEY=your_stripe_secret_key
    depends_on:
      - redis

  # Database
  mongo:
    image: mongo:6.0
    restart: always
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password
    volumes:
      - mongo_data:/data/db

  # Redis for caching and message queuing
  redis:
    image: redis:7-alpine
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data

volumes:
  mongo_data:
  redis_data:

networks:
  default:
    driver: bridge